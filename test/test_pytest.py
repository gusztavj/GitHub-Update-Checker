
# Generated by CodiumAI
from repository import Repository, RepositoryAccessManager
import customExceptions
import datetime
from datetime import datetime, timedelta
import pytest


class TestRepositoryAccessManager:

    # Can instantiate the RepositoryAccessManager class with a valid repository slug
    def test_instantiate_with_valid_slug(self):
        repo_access_manager = RepositoryAccessManager("T1nkR-Mesh-Name-Synchronizer")
        assert isinstance(repo_access_manager, RepositoryAccessManager)

    # Can get the URL of the repository
    def test_get_repo_url(self):
        repo_access_manager = RepositoryAccessManager("T1nkR-Mesh-Name-Synchronizer")
        assert repo_access_manager.repoUrl() == "https://github.com/gusztavj/T1nkR-Mesh-Name-Synchronizer/"

    # Can get the API URL to get latest release information
    def test_get_repo_release_api_url(self):
        repo_access_manager = RepositoryAccessManager("T1nkR-Mesh-Name-Synchronizer")
        assert repo_access_manager.repoReleaseApiUrl() == "https://api.github.com/repos/gusztavj/T1nkR-Mesh-Name-Synchronizer/releases/latest"

                    
class TestRepository:

    # Creating a new instance of Repository with default values should fail for having no repo slug specified
    def test_default_values(self):
        
        with pytest.raises(TypeError):
            repo = Repository()
        

    # Creating a new instance of Repository with custom values should set all properties to the custom values.
    def test_custom_values(self):
        repo = Repository(
            repoSlug="my-repo",
            checkFrequencyDays=7,
            latestVersion="1.0.0",
            latestVersionName="Release 1.0.0",
            lastCheckedTimestamp=datetime.now(),
            releaseUrl="https://github.com/my-repo/releases/tag/1.0.0",
            repoUrl="https://github.com/my-repo"
        )
        assert repo.getRepoSlug() == "my-repo"
        assert repo.getCheckFrequencyDays() == 7
        assert repo.latestVersion == "1.0.0"
        assert repo.latestVersionName == "Release 1.0.0"
        assert repo.getLastCheckedTimestamp() == datetime.now()
        assert repo.releaseUrl == "https://github.com/my-repo/releases/tag/1.0.0"
        assert repo.repoUrl == "https://github.com/my-repo"

    # Updating the lastCheckedTimestamp property of a Repository instance should change its value to the new value.
    def test_update_lastCheckedTimestamp(self):
        repo = Repository("Foo")
        new_timestamp = datetime.now()
        repo.setLastCheckedTimestamp(new_timestamp)
        assert repo.getLastCheckedTimestamp() == new_timestamp

    # Creating a new instance of Repository with a negative checkFrequencyDays value should raise a ValueError.
    def test_negative_checkFrequencyDays(self):
        with pytest.raises(customExceptions.RequestError):
            Repository(repoSlug="Foo", checkFrequencyDays=-1)

    # Creating a new instance of Repository with a lastCheckedTimestamp value that is not a datetime object should raise a TypeError.
    def test_invalid_lastCheckedTimestamp(self):
        with pytest.raises(customExceptions.RequestError):
            Repository(repoSlug="Foo", lastCheckedTimestamp="2022-01-01")